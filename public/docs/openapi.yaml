openapi: 3.0.3
info:
    title: Laravel
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /api/buses/assign-driver:
        post:
            summary: 'Assign driver to bus.'
            description: ''
            parameters:
                -
                    in: query
                    name: driverId
                    description: 'Id of Driver user'
                    example: 7
                    required: true
                    schema:
                        type: integer
                        description: 'Id of Driver user'
                        example: 7
                -
                    in: query
                    name: busId
                    description: 'Id of bus to assign the driver'
                    example: 12
                    required: true
                    schema:
                        type: integer
                        description: 'Id of bus to assign the driver'
                        example: 12
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    model: Mercedes
                                properties:
                                    id: { type: integer, example: 1 }
                                    model: { type: string, example: Mercedes }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Bus already assigned to this driver'
                                properties:
                                    msg: { type: string, example: 'Bus already assigned to this driver' }
            tags:
                - Buses
    /api/buses/delete-driver:
        delete:
            summary: 'Remove driver from bus.'
            description: ''
            parameters:
                -
                    in: query
                    name: busId
                    description: 'Id of bus to remove the driver from'
                    example: 8
                    required: true
                    schema:
                        type: integer
                        description: 'Id of bus to remove the driver from'
                        example: 8
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Bus has no driver assigned'
                                properties:
                                    msg: { type: string, example: 'Bus has no driver assigned' }
            tags:
                - Buses
    /api/buses/assign-route:
        post:
            summary: 'Assign route to bus.'
            description: ''
            parameters:
                -
                    in: query
                    name: routeId
                    description: 'Id of Route to assign to bus'
                    example: 10
                    required: true
                    schema:
                        type: integer
                        description: 'Id of Route to assign to bus'
                        example: 10
                -
                    in: query
                    name: busId
                    description: 'Id of bus to assign the driver'
                    example: 2
                    required: true
                    schema:
                        type: integer
                        description: 'Id of bus to assign the driver'
                        example: 2
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    model: Volvo
                                properties:
                                    id: { type: integer, example: 1 }
                                    model: { type: string, example: Volvo }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Route already assigned to this bus'
                                properties:
                                    msg: { type: string, example: 'Route already assigned to this bus' }
            tags:
                - Buses
    /api/buses/delete-route:
        delete:
            summary: 'Remove route from bus.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Bus has no route assigned'
                                properties:
                                    msg: { type: string, example: 'Bus has no route assigned' }
            tags:
                - Buses
    /api/buses:
        get:
            summary: 'Display all buses.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 1
                                    data: [{ id: 1, model: Mercedes }]
                                    first_page_url: 'http://homestead.test/api/buses?page=1'
                                    from: 1
                                    last_page: 1
                                    last_page_url: 'http://homestead.test/api/buses?page=1'
                                    next_page_url: null
                                    path: 'http://homestead.test/api/buses'
                                    per_page: 20
                                    prev_page_url: null
                                    to: 1
                                    total: 1
                                properties:
                                    current_page: { type: integer, example: 1 }
                                    data: { type: array, example: [{ id: 1, model: Mercedes }], items: { type: object } }
                                    first_page_url: { type: string, example: 'http://homestead.test/api/buses?page=1' }
                                    from: { type: integer, example: 1 }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://homestead.test/api/buses?page=1' }
                                    next_page_url: { type: string, example: null }
                                    path: { type: string, example: 'http://homestead.test/api/buses' }
                                    per_page: { type: integer, example: 20 }
                                    prev_page_url: { type: string, example: null }
                                    to: { type: integer, example: 1 }
                                    total: { type: integer, example: 1 }
            tags:
                - Buses
        post:
            summary: 'Store a newly created bus.'
            description: ''
            parameters:
                -
                    in: query
                    name: model
                    description: 'Make of the bus.'
                    example: ad
                    required: true
                    schema:
                        type: string
                        description: 'Make of the bus.'
                        example: ad
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    model: 'Volvo 2'
                                    id: 2
                                properties:
                                    model: { type: string, example: 'Volvo 2' }
                                    id: { type: integer, example: 2 }
                400:
                    description: '400, validation error'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    name: 'The name may not be greater than 10 characters.'
                                properties:
                                    name: { type: string, example: 'The name may not be greater than 10 characters.' }
            tags:
                - Buses
    '/api/buses/{id}':
        get:
            summary: 'Display the specified bus.'
            description: 'This endpoint allows you to look the details of a bus.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    model: Mercedes
                                    driver_id: null
                                    route_id: null
                                properties:
                                    id: { type: integer, example: 1 }
                                    model: { type: string, example: Mercedes }
                                    driver_id: { type: string, example: null }
                                    route_id: { type: string, example: null }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - Buses
        put:
            summary: 'Update the specified bus.'
            description: ''
            parameters:
                -
                    in: query
                    name: name
                    description: 'Name of the Bus.'
                    example: consectetur
                    required: true
                    schema:
                        type: string
                        description: 'Name of the Bus.'
                        example: consectetur
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: boolean
                                example: true
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - Buses
        delete:
            summary: 'Remove the specified bus from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found'
                                properties:
                                    msg: { type: string, example: 'Not found' }
            tags:
                - Buses
        parameters:
            -
                in: path
                name: id
                description: 'The ID of the Bus.'
                example: 15
                required: true
                schema:
                    type: integer
    '/api/buses/{id}/drive':
        put:
            summary: 'Drive a bus.'
            description: 'Few things to drive a bus: register user, promote it to Driver, create Route and assign it to Bus and that''s it - Driver can drive a Bus!'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_route_point_name: Koroleva
                                    current_route_point_number: '23'
                                    passengers_out: 113
                                    passengers_in: 63
                                    passengers_in_the_bus: 64
                                    max_passengers_in_the_bus: 300
                                    description: 'You arrived to the route point Koroleva 23. Passengers left: 113. Passengers entered: 63. Passengers riding in the bus: 64'
                                properties:
                                    current_route_point_name: { type: string, example: Koroleva }
                                    current_route_point_number: { type: string, example: '23' }
                                    passengers_out: { type: integer, example: 113 }
                                    passengers_in: { type: integer, example: 63 }
                                    passengers_in_the_bus: { type: integer, example: 64 }
                                    max_passengers_in_the_bus: { type: integer, example: 300 }
                                    description: { type: string, example: 'You arrived to the route point Koroleva 23. Passengers left: 113. Passengers entered: 63. Passengers riding in the bus: 64' }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'You are not a driver of this bus'
                                properties:
                                    msg: { type: string, example: 'You are not a driver of this bus' }
            tags:
                - Buses
        parameters:
            -
                in: path
                name: id
                description: 'The ID of the Bus.'
                example: 15
                required: true
                schema:
                    type: integer
    /api/bus-drivers:
        get:
            summary: 'Display all drivers.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                example:
                                    - { id: 2, name: Driver }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                example:
                                    - 'Role not found'
            tags:
                - 'Drivers (role)'
    '/api/bus-drivers/{id}':
        get:
            summary: 'Display the specified driver.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 2
                                    name: Driver
                                properties:
                                    id: { type: integer, example: 2 }
                                    name: { type: string, example: Driver }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                example:
                                    - 'Role not found'
            tags:
                - 'Drivers (role)'
        put:
            summary: 'Change users role to Driver.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    name: Regular
                                properties:
                                    id: { type: integer, example: 3 }
                                    name: { type: string, example: Regular }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                example:
                                    - 'Role not found'
            tags:
                - 'Drivers (role)'
        delete:
            summary: 'Remove Driver role from user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - 'Drivers (role)'
        parameters:
            -
                in: path
                name: id
                description: 'The ID of the user with Driver role.'
                example: 9
                required: true
                schema:
                    type: integer
    /api/route-points:
        get:
            summary: 'Display all Route Points.'
            description: 'Route Points is the points, from which Route is build.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 1
                                    data: [{ id: 1, street_name: 'Svyatoslava Rihtera', street_number: '148', lat: '46.4560308', lng: '30.6844385' }, { id: 2, street_name: Gastelo, street_number: '55', lat: '46.450927', lng: '30.684999' }, { id: 3, street_name: 'Borisa Derevyanko', street_number: '2', lat: '46.442794', lng: '30.704637' }]
                                    first_page_url: 'http://homestead.test/api/route-points?page=1'
                                    from: 1
                                    last_page: 1
                                    last_page_url: 'http://homestead.test/api/route-points?page=1'
                                    next_page_url: null
                                    path: 'http://homestead.test/api/route-points'
                                    per_page: 20
                                    prev_page_url: null
                                    to: 3
                                    total: 3
                                properties:
                                    current_page: { type: integer, example: 1 }
                                    data: { type: array, example: [{ id: 1, street_name: 'Svyatoslava Rihtera', street_number: '148', lat: '46.4560308', lng: '30.6844385' }, { id: 2, street_name: Gastelo, street_number: '55', lat: '46.450927', lng: '30.684999' }, { id: 3, street_name: 'Borisa Derevyanko', street_number: '2', lat: '46.442794', lng: '30.704637' }], items: { type: object } }
                                    first_page_url: { type: string, example: 'http://homestead.test/api/route-points?page=1' }
                                    from: { type: integer, example: 1 }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://homestead.test/api/route-points?page=1' }
                                    next_page_url: { type: string, example: null }
                                    path: { type: string, example: 'http://homestead.test/api/route-points' }
                                    per_page: { type: integer, example: 20 }
                                    prev_page_url: { type: string, example: null }
                                    to: { type: integer, example: 3 }
                                    total: { type: integer, example: 3 }
            tags:
                - 'Route Points'
        post:
            summary: 'Store a newly created Route Point.'
            description: ''
            parameters:
                -
                    in: query
                    name: street_name
                    description: 'Name of the route point Street.'
                    example: necessitatibus
                    required: true
                    schema:
                        type: string
                        description: 'Name of the route point Street.'
                        example: necessitatibus
                -
                    in: query
                    name: street_number
                    description: 'Number of the route point Street.'
                    example: possimus
                    required: true
                    schema:
                        type: string
                        description: 'Number of the route point Street.'
                        example: possimus
                -
                    in: query
                    name: lat
                    description: 'Latitude of the route point in format 1.111111'
                    example: distinctio
                    required: true
                    schema:
                        type: string
                        description: 'Latitude of the route point in format 1.111111'
                        example: distinctio
                -
                    in: query
                    name: lng
                    description: 'Longitude of the route pointin format 1.111111'
                    example: sapiente
                    required: true
                    schema:
                        type: string
                        description: 'Longitude of the route pointin format 1.111111'
                        example: sapiente
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    street_name: 'New street 2'
                                    street_number: '1'
                                    lat: '46.442794'
                                    lng: '30.704637'
                                    id: 4
                                properties:
                                    street_name: { type: string, example: 'New street 2' }
                                    street_number: { type: string, example: '1' }
                                    lat: { type: string, example: '46.442794' }
                                    lng: { type: string, example: '30.704637' }
                                    id: { type: integer, example: 4 }
                400:
                    description: '400, validation error'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    street_number: ['The street number may not be greater than 8 characters.']
                                properties:
                                    street_number: { type: array, example: ['The street number may not be greater than 8 characters.'], items: { type: string } }
            tags:
                - 'Route Points'
    '/api/route-points/{id}':
        get:
            summary: 'Display the specified Route Point.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    street_name: 'Svyatoslava Rihtera'
                                    street_number: '148'
                                    lat: '46.4560308'
                                    lng: '30.6844385'
                                properties:
                                    id: { type: integer, example: 1 }
                                    street_name: { type: string, example: 'Svyatoslava Rihtera' }
                                    street_number: { type: string, example: '148' }
                                    lat: { type: string, example: '46.4560308' }
                                    lng: { type: string, example: '30.6844385' }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - 'Route Points'
        put:
            summary: 'Update the specified Route Point.'
            description: ''
            parameters:
                -
                    in: query
                    name: street_name
                    description: 'Name of the route point Street.'
                    example: similique
                    required: true
                    schema:
                        type: string
                        description: 'Name of the route point Street.'
                        example: similique
                -
                    in: query
                    name: street_number
                    description: 'Number of the route point Street.'
                    example: animi
                    required: true
                    schema:
                        type: string
                        description: 'Number of the route point Street.'
                        example: animi
                -
                    in: query
                    name: lat
                    description: 'Latitude of the route point in format 1.111111'
                    example: occaecati
                    required: true
                    schema:
                        type: string
                        description: 'Latitude of the route point in format 1.111111'
                        example: occaecati
                -
                    in: query
                    name: lng
                    description: 'Longitude of the route pointin format 1.111111'
                    example: doloremque
                    required: true
                    schema:
                        type: string
                        description: 'Longitude of the route pointin format 1.111111'
                        example: doloremque
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 2
                                    street_name: 'test change'
                                    street_number: '222'
                                    lat: '1.211'
                                    lng: '2.161'
                                properties:
                                    id: { type: integer, example: 2 }
                                    street_name: { type: string, example: 'test change' }
                                    street_number: { type: string, example: '222' }
                                    lat: { type: string, example: '1.211' }
                                    lng: { type: string, example: '2.161' }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - 'Route Points'
        delete:
            summary: 'Remove the specified Route Point from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - 'Route Points'
        parameters:
            -
                in: path
                name: id
                description: 'The ID of the route point.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/routes/add-point:
        post:
            summary: "Add a point to route.\n\nRoute is a data structure that is build base on routes, saving their order."
            description: ''
            parameters:
                -
                    in: query
                    name: routeId
                    description: 'Id of the route where route point should be added.'
                    example: 9
                    required: true
                    schema:
                        type: integer
                        description: 'Id of the route where route point should be added.'
                        example: 9
                -
                    in: query
                    name: routePointId
                    description: 'Id of the route point, which should be added to route.'
                    example: 8
                    required: true
                    schema:
                        type: integer
                        description: 'Id of the route point, which should be added to route.'
                        example: 8
                -
                    in: query
                    name: afterRoutePoint
                    description: 'Id of the route point, after which should be added to route. If not set, new route point will be added as last.'
                    example: 16
                    required: false
                    schema:
                        type: integer
                        description: 'Id of the route point, after which should be added to route. If not set, new route point will be added as last.'
                        example: 16
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    route: { id: 1, name: 'Route №12', created_at: '2020-12-06 19:08:02', updated_at: '2020-12-06 19:08:02' }
                                    points: [{ id: 1, street_name: 'Svyatoslava Rihtera', street_number: '148', lat: '46.4560308', lng: '30.6844385', pivot: { route_id: '1', route_point_id: '1' } }, { id: 3, street_name: 'Borisa Derevyanko', street_number: '2', lat: '46.442794', lng: '30.704637', pivot: { route_id: '1', route_point_id: '3' } }, { id: 2, street_name: Gastelo, street_number: '55', lat: '46.450927', lng: '30.684999', pivot: { route_id: '1', route_point_id: '2' } }]
                                properties:
                                    route: { type: object, example: { id: 1, name: 'Route №12', created_at: '2020-12-06 19:08:02', updated_at: '2020-12-06 19:08:02' } }
                                    points: { type: array, example: [{ id: 1, street_name: 'Svyatoslava Rihtera', street_number: '148', lat: '46.4560308', lng: '30.6844385', pivot: { route_id: '1', route_point_id: '1' } }, { id: 3, street_name: 'Borisa Derevyanko', street_number: '2', lat: '46.442794', lng: '30.704637', pivot: { route_id: '1', route_point_id: '3' } }, { id: 2, street_name: Gastelo, street_number: '55', lat: '46.450927', lng: '30.684999', pivot: { route_id: '1', route_point_id: '2' } }], items: { type: object } }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - Routes
    /api/routes/delete-point:
        delete:
            summary: 'Delete a route point from route.'
            description: ''
            parameters:
                -
                    in: query
                    name: routeId
                    description: 'Id of the route where route point should be deleted from.'
                    example: 15
                    required: true
                    schema:
                        type: integer
                        description: 'Id of the route where route point should be deleted from.'
                        example: 15
                -
                    in: query
                    name: routePointId
                    description: 'Id of the route point, which should be deleted from route.'
                    example: 19
                    required: true
                    schema:
                        type: integer
                        description: 'Id of the route point, which should be deleted from route.'
                        example: 19
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found'
                                properties:
                                    msg: { type: string, example: 'Not found' }
            tags:
                - Routes
    /api/routes:
        get:
            summary: 'Display all routes.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 1
                                    data: [{ id: 1, name: 'Route №12', created_at: '2020-12-06 19:08:02', updated_at: '2020-12-06 19:08:02' }]
                                    first_page_url: 'http://homestead.test/api/routes?page=1'
                                    from: 1
                                    last_page: 1
                                    last_page_url: 'http://homestead.test/api/routes?page=1'
                                    next_page_url: null
                                    path: 'http://homestead.test/api/routes'
                                    per_page: 20
                                    prev_page_url: null
                                    to: 1
                                    total: 1
                                properties:
                                    current_page: { type: integer, example: 1 }
                                    data: { type: array, example: [{ id: 1, name: 'Route №12', created_at: '2020-12-06 19:08:02', updated_at: '2020-12-06 19:08:02' }], items: { type: object } }
                                    first_page_url: { type: string, example: 'http://homestead.test/api/routes?page=1' }
                                    from: { type: integer, example: 1 }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://homestead.test/api/routes?page=1' }
                                    next_page_url: { type: string, example: null }
                                    path: { type: string, example: 'http://homestead.test/api/routes' }
                                    per_page: { type: integer, example: 20 }
                                    prev_page_url: { type: string, example: null }
                                    to: { type: integer, example: 1 }
                                    total: { type: integer, example: 1 }
            tags:
                - Routes
        post:
            summary: 'Store a newly created route.'
            description: ''
            parameters:
                -
                    in: query
                    name: name
                    description: 'Name of the route.'
                    example: et
                    required: true
                    schema:
                        type: string
                        description: 'Name of the route.'
                        example: et
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    name: 'Route №15'
                                    updated_at: '2020-12-07 07:33:32'
                                    created_at: '2020-12-07 07:33:32'
                                    id: 2
                                properties:
                                    name: { type: string, example: 'Route №15' }
                                    updated_at: { type: string, example: '2020-12-07 07:33:32' }
                                    created_at: { type: string, example: '2020-12-07 07:33:32' }
                                    id: { type: integer, example: 2 }
                400:
                    description: '400, validation error'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    name: 'The name may not be greater than 10 characters.'
                                properties:
                                    name: { type: string, example: 'The name may not be greater than 10 characters.' }
            tags:
                - Routes
    '/api/routes/{id}':
        get:
            summary: 'Display the specified route.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    route: { id: 1, name: 'Route №12', created_at: '2020-12-06 19:08:02', updated_at: '2020-12-06 19:08:02' }
                                    points: [{ id: 1, street_name: 'Svyatoslava Rihtera', street_number: '148', lat: '46.4560308', lng: '30.6844385', pivot: { route_id: '1', route_point_id: '1' } }, { id: 3, street_name: 'Borisa Derevyanko', street_number: '2', lat: '46.442794', lng: '30.704637', pivot: { route_id: '1', route_point_id: '3' } }, { id: 2, street_name: Gastelo, street_number: '55', lat: '46.450927', lng: '30.684999', pivot: { route_id: '1', route_point_id: '2' } }]
                                properties:
                                    route: { type: object, example: { id: 1, name: 'Route №12', created_at: '2020-12-06 19:08:02', updated_at: '2020-12-06 19:08:02' } }
                                    points: { type: array, example: [{ id: 1, street_name: 'Svyatoslava Rihtera', street_number: '148', lat: '46.4560308', lng: '30.6844385', pivot: { route_id: '1', route_point_id: '1' } }, { id: 3, street_name: 'Borisa Derevyanko', street_number: '2', lat: '46.442794', lng: '30.704637', pivot: { route_id: '1', route_point_id: '3' } }, { id: 2, street_name: Gastelo, street_number: '55', lat: '46.450927', lng: '30.684999', pivot: { route_id: '1', route_point_id: '2' } }], items: { type: object } }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - Routes
        put:
            summary: 'Update the specified route.'
            description: ''
            parameters:
                -
                    in: query
                    name: name
                    description: 'Name of the route.'
                    example: et
                    required: true
                    schema:
                        type: string
                        description: 'Name of the route.'
                        example: et
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    name: 'Route №123'
                                    created_at: '2020-12-07 07:52:22'
                                    updated_at: '2020-12-07 08:35:57'
                                properties:
                                    id: { type: integer, example: 4 }
                                    name: { type: string, example: 'Route №123' }
                                    created_at: { type: string, example: '2020-12-07 07:52:22' }
                                    updated_at: { type: string, example: '2020-12-07 08:35:57' }
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - Routes
        delete:
            summary: 'Remove the specified route.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Basic {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, success'
                404:
                    description: '404, not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    msg: 'Not found.'
                                properties:
                                    msg: { type: string, example: 'Not found.' }
            tags:
                - Routes
        parameters:
            -
                in: path
                name: id
                description: 'The ID of the route.'
                example: 3
                required: true
                schema:
                    type: integer
components:
    securitySchemes:
        default:
            type: http
            scheme: basic
            description: ''
security:
    -
        default: []
